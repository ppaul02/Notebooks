{"id": "/subscriptions/0e40d638-6ee2-42fa-83d5-78641df4b3cb/resourceGroups/DataQualityPOC/providers/Microsoft.Synapse/workspaces/synapse-etl-poc/notebooks/CSV_ETL_Testing_Notebook_v2", "name": "CSV_ETL_Testing_Notebook_v2", "type": "Microsoft.Synapse/workspaces/notebooks", "etag": "0b00472d-0000-0100-0000-626bf7c40000", "properties": {"folder": {"name": "Testing_PoC/CSV/DNU"}, "targetSparkConfiguration": null, "entityState": null, "renameOperationDetails": null, "big_data_pool": {"type": "BigDataPoolReference", "reference_name": "apachesparkpool"}, "session_properties": {"driver_memory": "28g", "driver_cores": 4, "executor_memory": "28g", "executor_cores": 4, "num_executors": 2}, "metadata": {"a365ComputeOptions": {"id": "/subscriptions/0e40d638-6ee2-42fa-83d5-78641df4b3cb/resourceGroups/DataQualityPOC/providers/Microsoft.Synapse/workspaces/synapse-etl-poc/bigDataPools/apachesparkpool", "name": "apachesparkpool", "type": "Spark", "endpoint": "https://synapse-etl-poc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/apachesparkpool", "auth": {"type": "AAD", "authResource": "https://dev.azuresynapse.net"}, "sparkVersion": "3.1", "nodeCount": 3, "cores": 16, "memory": 112, "extraHeader": null}, "saveOutput": true, "sessionKeepAliveTimeout": 30, "enableDebugMode": false, "kernelspec": {"name": "synapse_pyspark", "display_name": "Synapse PySpark"}, "language_info": {"name": "python"}}, "nbformat": 4, "nbformat_minor": 2, "cells": [{"execution_count": 92, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["import pyodbc\r\n", "import openpyxl\r\n", "from openpyxl import load_workbook\r\n", "from openpyxl.utils.dataframe import dataframe_to_rows\r\n", "from openpyxl.worksheet.table import Table, TableStyleInfo\r\n", "import pandas as pd\r\n", "from pyspark.sql import Row, SparkSession\r\n", "import pyspark.sql.functions as F\r\n", "import pyspark.sql.types as T\r\n", "from pyspark.sql.functions import *"], "outputs": []}, {"execution_count": 94, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#pull in source & target parameter values from synapse pipeline\r\n", "object_type='csv'\r\n", "\r\n", "target_object_name='global_superstore'\r\n", "target_account_name = \"etlstoragepocaccount\"\r\n", "target_container_name = \"etlstoragepocfilesystem\"\r\n", "target_relative_path = \"csv\"\r\n", "\r\n", "sqlservername = 'XXX'\r\n", "sqldbusername = 'XXX'\r\n", "jdbcDatabase = 'XXX'\r\n", "password = 'XXX'\r\n", "\r\n", "Run_Environment='dev'"], "outputs": []}, {"execution_count": 93, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["jdbcPort = \"1433\"\r\n", "\r\n", "jdbcHostname = \"%s.database.windows.net\" %(sqlservername)\r\n", "username = \"%s@%s\"%(sqldbusername,sqlservername)\r\n", "\r\n", "jdbcUrl = \"jdbc:sqlserver://{0}:{1};database={2}\".format(jdbcHostname, jdbcPort, jdbcDatabase)\r\n", "connectionProperties = {\r\n", "    \"user\" : username,\r\n", "    \"password\" : password,\r\n", "    \"driver\" : \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n", "    }"], "outputs": []}, {"execution_count": 95, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#Get Target DataFrame\r\n", "\r\n", "adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (target_container_name, target_account_name, target_relative_path)\r\n", "\r\n", "df1 = spark.read.option('header', 'true') \\\r\n", "                .option('delimiter', ',') \\\r\n", "                .csv(adls_path + '/'+target_object_name+'.csv')"], "outputs": []}, {"execution_count": 96, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["pushdown_query = \"(Select * from sqldbschema.\"+target_object_name+\") source_object\"\r\n", "df = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)"], "outputs": []}, {"execution_count": 97, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["%run Testing_PoC/CSV/CheckFunctions"], "outputs": []}, {"execution_count": 98, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#condition checks for Source\r\n", "\r\n", "#get current date\r\n", "from datetime import date\r\n", "current_date = str(date.today())\r\n", "\r\n", "#getMaximimRunIDfromPipelineSummaryTable for the object\r\n", "run_id=get_run_id(target_object_name,current_date,jdbcUrl,connectionProperties)\r\n", "\r\n", "#get test cases\r\n", "if Run_Environment=='dev':\r\n", "    pushdown_query = \"(Select Test_Case,source_column,target_column,additional_arguments from [sqldbschema].[Test_Case_Control] where Layer='Transformation' and Object_Type='\"+object_type+\"' and Table_name ='\"+target_object_name+\"') Test_Case_Control\"\r\n", "if Run_Environment=='qa':\r\n", "    pushdown_query = \"(Select Test_Case,source_column,target_column,additional_arguments from [sqldbschema].[Test_Case_Control] where Layer='Transformation' and Object_Type='\"+object_type+\"' and Table_name ='\"+target_object_name+\"' and test_tag not like '%smoke%') Test_Case_Control\"\r\n", "if Run_Environment=='prod':\r\n", "    pushdown_query = \"(Select Test_Case,source_column,target_column,additional_arguments from [sqldbschema].[Test_Case_Control] where Layer='Transformation' and Object_Type='\"+object_type+\"' and Table_name ='\"+target_object_name+\"' and test_tag not like '%smoke%'and test_tag not like '%unit%') Test_Case_Control\"\r\n", "\r\n", "df_Test_Case = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)\r\n", "\r\n", "columns_TransformationSummary = StructType([StructField(\"Table_name\", StringType(), False),\r\n", "                      StructField(\"Run_Date\", StringType(), False),\r\n", "                      StructField(\"Run_ID\", IntegerType(), False),\r\n", "                      StructField(\"DataTransformation_TestScenario\", StringType(), False),\r\n", "                      StructField(\"Status\", StringType(), False),\r\n", "                      StructField(\"ErrorRecords\", IntegerType(), False),\r\n", "                      StructField(\"Path_To_Failed_Record_Dataset\", StringType(), False)])\r\n", "\r\n", "return_value=\"1\"   \r\n", "\r\n", "for test_case in df_Test_Case.collect():\r\n", "    v_test_case=test_case[0]\r\n", "    v2_test_case=test_case[3]\r\n", "    test_case_count=eval(\"\"+v_test_case+\" (df1 ,df,\"+v2_test_case+\")\")\r\n", "\r\n", "    #update TransformationSummary table\r\n", "    v_file_location=str(\"Test_Output/%s/Test_Run_%s/%s\") % (current_date,run_id,v_test_case)\r\n", "    if test_case_count>0:\r\n", "        vals_temp_count=[(target_object_name,current_date,run_id,v_test_case,\"Failed\",test_case_count,v_file_location)]\r\n", "    else:\r\n", "        vals_temp_count=[(target_object_name,current_date,run_id,v_test_case,\"Success\",\"0\",\"\")]\r\n", "\r\n", "    df_temp_test_case = spark.createDataFrame(vals_temp_count, columns_TransformationSummary)\r\n", "\r\n", "    df_temp_test_case.write.mode('append').jdbc(jdbcUrl,\"sqldbschema.Transformation_Summary\", properties=connectionProperties) \r\n", "\r\n", "    if test_case_count>0:\r\n", "        return_value=\"0\" \r\n", "\r\n", "columns_PipelineSummary = StructType([StructField(\"Table_name\", StringType(), False),\r\n", "          StructField(\"Run_Date\", StringType(), False),\r\n", "          StructField(\"Run_ID\", IntegerType(), False),\r\n", "          StructField(\"Layer\", StringType(), False),\r\n", "          StructField(\"Status\", StringType(), False)])\r\n", "\r\n", "#update PipelineSummary table\r\n", "if (return_value==\"1\"):\r\n", "    vals_pipelinesumm=[(target_object_name,current_date,run_id,'Transformation','Success')]\r\n", "    df_temp_pipelinesumm = spark.createDataFrame(vals_pipelinesumm, columns_PipelineSummary) \r\n", "else:\r\n", "    vals_pipelinesumm=[(target_object_name,current_date,run_id,'Transformation','Failed')]\r\n", "    df_temp_pipelinesumm = spark.createDataFrame(vals_pipelinesumm, columns_PipelineSummary) \r\n", "\r\n", "df_temp_pipelinesumm.write.mode('append').jdbc(jdbcUrl,\"sqldbschema.Pipeline_Summary\", properties=connectionProperties)   "], "outputs": []}, {"execution_count": 99, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#return exit value to synapse pipeline\r\n", "mssparkutils.notebook.exit(return_value)"], "outputs": []}]}}