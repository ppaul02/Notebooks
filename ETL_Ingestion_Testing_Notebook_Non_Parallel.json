{"id": "/subscriptions/0e40d638-6ee2-42fa-83d5-78641df4b3cb/resourceGroups/DataQualityPOC/providers/Microsoft.Synapse/workspaces/synapse-etl-poc/notebooks/ETL_Ingestion_Testing_Notebook_Non_Parallel", "name": "ETL_Ingestion_Testing_Notebook_Non_Parallel", "type": "Microsoft.Synapse/workspaces/notebooks", "etag": "3a06f5ab-0000-0100-0000-62963e6d0000", "properties": {"entityState": null, "renameOperationDetails": null, "targetSparkConfiguration": null, "folder": {"name": "Testing_PoC/CSV/DNU."}, "big_data_pool": {"type": "BigDataPoolReference", "reference_name": "apachesparkpool"}, "session_properties": {"driver_memory": "28g", "driver_cores": 4, "executor_memory": "28g", "executor_cores": 4, "num_executors": 2}, "metadata": {"enableDebugMode": false, "saveOutput": true, "sessionKeepAliveTimeout": 30, "a365ComputeOptions": {"id": "/subscriptions/0e40d638-6ee2-42fa-83d5-78641df4b3cb/resourceGroups/DataQualityPOC/providers/Microsoft.Synapse/workspaces/synapse-etl-poc/bigDataPools/apachesparkpool", "name": "apachesparkpool", "type": "Spark", "endpoint": "https://synapse-etl-poc.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/apachesparkpool", "auth": {"type": "AAD", "authResource": "https://dev.azuresynapse.net"}, "sparkVersion": "3.1", "nodeCount": 3, "cores": 16, "memory": 112, "extraHeader": null}, "kernelspec": {"name": "synapse_pyspark", "display_name": "Synapse PySpark"}, "language_info": {"name": "python"}}, "nbformat": 4, "nbformat_minor": 2, "cells": [{"execution_count": 8, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#import required modules\r\n", "\r\n", "import pyodbc\r\n", "import openpyxl\r\n", "from openpyxl import load_workbook\r\n", "from openpyxl.utils.dataframe import dataframe_to_rows\r\n", "from openpyxl.worksheet.table import Table, TableStyleInfo\r\n", "import pandas as pd\r\n", "from pyspark.sql import Row, SparkSession\r\n", "import pyspark.sql.functions as F\r\n", "import pyspark.sql.types as T\r\n", "from pyspark.sql import SparkSession\r\n", "from pyspark.sql.types import *\r\n", "import time"], "outputs": []}, {"execution_count": 9, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}, "tags": ["parameters"]}, "source": ["#pull in source & target parameter values from synapse pipeline\r\n", "object_type='sql'\r\n", "\r\n", "target_object_name='global_superstore'\r\n", "target_account_name = \"etlstoragepocaccount\"\r\n", "target_container_name = \"etlstoragepocfilesystem\"\r\n", "target_relative_path = \"csv\"\r\n", "\r\n", "source_account_name = \"etlstoragepocaccount\"\r\n", "source_container_name = \"etlstoragepocfilesystem\"\r\n", "source_relative_path = \"csv\"\r\n", "source_object_name='srcsqldbschema.Global_Superstore'\r\n", "\r\n", "sqlservername = 'XXX'\r\n", "sqldbusername = 'XXX'\r\n", "jdbcDatabase = 'XXX'\r\n", "password = 'XXX'\r\n", "\r\n", "Run_Environment='dev'\r\n", "Test_Tag='Unit'\r\n", ""], "outputs": []}, {"execution_count": 15, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["jdbcPort = \"1433\"\r\n", "\r\n", "jdbcHostname = \"%s.database.windows.net\" %(sqlservername)\r\n", "username = \"%s@%s\"%(sqldbusername,sqlservername)\r\n", "\r\n", "jdbcUrl = \"jdbc:sqlserver://{0}:{1};database={2}\".format(jdbcHostname, jdbcPort, jdbcDatabase)\r\n", "connectionProperties = {\r\n", "    \"user\" : username,\r\n", "    \"password\" : password,\r\n", "    \"driver\" : \"com.microsoft.sqlserver.jdbc.SQLServerDriver\"\r\n", "    }"], "outputs": []}, {"execution_count": 16, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#Get Target DataFrame\r\n", "\r\n", "adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (target_container_name, target_account_name, target_relative_path)\r\n", "\r\n", "df1 = spark.read.option('header', 'true') \\\r\n", "                .option('delimiter', ',') \\\r\n", "                .csv(adls_path + '/'+target_object_name+'.csv')"], "outputs": []}, {"execution_count": 17, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#Get Source DataFrame\r\n", "if object_type=='sql':\r\n", "  pushdown_query = \"(Select * from \"+source_object_name+\") source_object\"\r\n", "  df = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)\r\n", "\r\n", "if object_type=='parquet':\r\n", "  adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (source_container_name, source_account_name, source_relative_path)\r\n", "  df = spark.read.load(adls_path + '/'+source_object_name+'/', format='parquet')"], "outputs": []}, {"execution_count": 18, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["%run Testing_PoC/CSV/CheckFunctions"], "outputs": []}, {"execution_count": null, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["pre_test_tag_cond=\"\"\r\n", "for tag in Test_Tag.split(','):\r\n", "    if pre_test_tag_cond==\"\":\r\n", "        pre_test_tag_cond=\"(lower(Test_Tag) like '%\"+tag+\"%')\"\r\n", "    else:\r\n", "        pre_test_tag_cond=pre_test_tag_cond+\" or (lower(Test_Tag) like '%\"+tag+\"%')\"\r\n", "test_tag_cond=\"(\"+pre_test_tag_cond+\")\"\r\n", "print(test_tag_cond)"], "outputs": []}, {"execution_count": null, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["pre_run_env_cond=\"\"\r\n", "for env in Run_Environment.split(','):\r\n", "    if pre_run_env_cond==\"\":\r\n", "        pre_run_env_cond=\"(lower(Run_Env) like '%\"+env+\"%')\"\r\n", "    else:\r\n", "        pre_run_env_cond=pre_run_env_cond+\" or (lower(Run_Env) like '%\"+env+\"%')\"\r\n", "run_env_cond=\"(\"+pre_run_env_cond+\")\"\r\n", "print(run_env_cond)"], "outputs": []}, {"execution_count": 19, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#condition checks for Source\r\n", "\r\n", "#get current date\r\n", "from datetime import date\r\n", "current_date = str(date.today())\r\n", "\r\n", "#getMaximimRunIDfromPipelineSummaryTable for the object\r\n", "run_id=get_run_id(target_object_name,current_date,jdbcUrl,connectionProperties)\r\n", "\r\n", "\r\n", "#get test cases\r\n", "pushdown_query = \"(Select Test_Case from [sqldbschema].[Test_Case_Control] where Layer='Ingestion' and \"+test_tag_cond+\" and \"+run_env_cond+\" and Object_Type='\"+object_type+\"' and Table_name ='\"+target_object_name+\"') Test_Case_Control\"\r\n", "df_Test_Case = spark.read.jdbc(url=jdbcUrl, table=pushdown_query, properties=connectionProperties)\r\n", "\r\n", "columns_IngestionSummary = StructType([StructField(\"Table_name\", StringType(), False),\r\n", "                      StructField(\"Run_Date\", StringType(), False),\r\n", "                      StructField(\"Run_ID\", IntegerType(), False),\r\n", "                      StructField(\"Check_Type\", StringType(), False),\r\n", "                      StructField(\"Status\", StringType(), False)]) \r\n", "\r\n", "return_value=\"1\"   \r\n", "\r\n", "st = time.time()\r\n", "\r\n", "for test_case in df_Test_Case.collect():\r\n", "    v_test_case=test_case[0]\r\n", "    test_case_flag=eval(\"\"+v_test_case+\" (df ,df1)\")\r\n", "        \r\n", "    #update IngestionSummary table\r\n", "    vals_temp_count=[(target_object_name,current_date,run_id,v_test_case,test_case_flag)]\r\n", "    df_temp_test_case = spark.createDataFrame(vals_temp_count, columns_IngestionSummary)\r\n", "\r\n", "    df_temp_test_case.write.mode('append').jdbc(jdbcUrl,\"sqldbschema.Ingestion_Summary\", properties=connectionProperties) \r\n", "\r\n", "    if test_case_flag!='Success':\r\n", "        return_value=\"0\" \r\n", "\r\n", "et = time.time()\r\n", "print(f\"Execution time: {et - st:.2f}\")\r\n", "\r\n", "columns_PipelineSummary = StructType([StructField(\"Table_name\", StringType(), False),\r\n", "          StructField(\"Run_Date\", StringType(), False),\r\n", "          StructField(\"Run_ID\", IntegerType(), False),\r\n", "          StructField(\"Layer\", StringType(), False),\r\n", "          StructField(\"Status\", StringType(), False)])\r\n", "\r\n", "#update PipelineSummary table\r\n", "if (return_value==\"1\"):\r\n", "    vals_pipelinesumm=[(target_object_name,current_date,run_id,'Ingestion','Success')]\r\n", "    df_temp_pipelinesumm = spark.createDataFrame(vals_pipelinesumm, columns_PipelineSummary) \r\n", "else:\r\n", "    vals_pipelinesumm=[(target_object_name,current_date,run_id,'Ingestion','Failed')]\r\n", "    df_temp_pipelinesumm = spark.createDataFrame(vals_pipelinesumm, columns_PipelineSummary) \r\n", "\r\n", "df_temp_pipelinesumm.write.mode('append').jdbc(jdbcUrl,\"sqldbschema.Pipeline_Summary\", properties=connectionProperties)   \r\n", ""], "outputs": []}, {"execution_count": 20, "cell_type": "code", "metadata": {"jupyter": {"source_hidden": false, "outputs_hidden": false}, "nteract": {"transient": {"deleting": false}}}, "source": ["#return exit value to synapse pipeline\r\n", "mssparkutils.notebook.exit(return_value)"], "outputs": []}]}}